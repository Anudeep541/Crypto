'''
Created by Jane2197 on 14-09-19

"""
Generation of 16 sub keys in DES
Input must be 64-bit length and Output is of 48-bit length
"""

'''

key = list(map(int,input().split()))
key.insert(0,'dummy')
lenky = len(key)
#print (key)
ipky = []

'''
party = []
for x in range(1,lenky):
    if x%8==0 and key[x]!= 1:
        party.append(key[x])
    else:
        ipky.append(key[x])
#print ("Parity>>>",party)
#print ("ipky>>>",ipky)
'''

### Permutation box 1 --> PC1 ###

def perm1(key):
    p1mat = [[57,49,41,33,25,17,9],[1,58,50,42,34,26,18],[10,2,59,51,43,35,27],[19,11,3,60,52,44,36],[63,55,47,39,31,23,15],[7,62,54,46,38,30,22],[14,6,61,53,45,37,29],[21,13,5,28,20,12,4]]
    p1tmp = []
    for r1 in range(0,len(p1mat)):
        for c1 in range(0,7):
            p1tmp.append(key[p1mat[r1][c1]])
    return p1tmp

### Permutation box 2 --> PC2 ###

def perm2(mrgls):
    #print ("Inside Mrgls>>>",mrgls)
    mrgls.insert(0,"dummy")
    p2mat = [[14,17,11,24,1,5],[3,28,15,6,21,10],[23,19,12,4,26,8],[16,7,27,20,13,2],[41,52,31,37,47,55],[30,40,51,45,33,48],[44,49,39,56,34,53],[46,42,50,36,29,32]]
    p2tmp = []
    r2 = 0
    #print ("Length of p2mat>>>",len(p2mat))
    while r2<len(p2mat):
        #print ("r2>>>",r2)
        c2 = 0
        while c2<6:
            #print ("c2>>>",c2)
            p2tmp.append(mrgls[p2mat[r2][c2]])
            c2+=1
        r2+=1
    return p2tmp


ipky = perm1(key)
print ("Key after PC1:")
print (ipky)

left = ipky[0:len(ipky)//2]                                 # Left Half of key
rigt = ipky[len(ipky)//2:len(ipky)+1]                       # Right Half of key
print ("Left>>>",left)
print ("Right>>>",rigt)

### Generating 16 subkeys ###

for y in range(0,16):
    leftmp = [0 for i in range(len(left))]
    rittmp = [0 for i in range(len(left))]
    if y==0 or y==1 or y==8 or y==15:                           # Shifting 1 bit to left
        for z in range(0,len(left)):
            leftmp[z-1] = left[z]
            rittmp[z-1] = rigt[z]
    else:
        for p in range(0,len(left)):                            # Shifting 2 bits to left
            leftmp[p-2] = left[p]
            rittmp[p-2] = rigt[p]
    left = leftmp
    rigt = rittmp
    #print ("Left after shift>>>",left)
    #print ("Right after shift>>>",rigt)
    mrgls = leftmp+rittmp                                       # Merging the left and right halves after shifting
    #print ("Mrgls>>>",mrgls)
    #print ("Length of mrgls>>>",len(mrgls))
    subky = perm2(mrgls)
    print ("Subkey",y+1,"is:")
    print (subky)
    #print ("Length of subky>>>",len(subky))
